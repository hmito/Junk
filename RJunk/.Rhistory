lines(rep(i,2),c(-100,1000))
}
}else if(as.integer(end.date-start.date)>=120){
pos = as.Date(sprintf("%d-%d-01",table$year,table$month))
axis(1, pos, format(pos, "%Y.%b"), cex.axis = 1.0)
for(i in pos){
lines(rep(i,2),c(-100,1000))
}
}else{
axis(1, table$date, format(date, "%b/%d"), cex.axis = 1.0)
}
lines(table$datetime,table$flow,col="blue",lwd=2)
table = master %>% filter(start.date<=date & date<=end.date)
plot(table$date,table$flow,type="n",xlim=c(start.date,end.date),xaxt="n")
if(as.integer(end.date-start.date)>=365*2){
pos = as.Date(sprintf("%d-01-01",table$year))
axis(1, pos, format(pos, "%Y"), cex.axis = 1.0)
for(i in pos){
lines(rep(i,2),c(-100,1000))
}
}else if(as.integer(end.date-start.date)>=120){
pos = as.Date(sprintf("%d-%d-01",table$year,table$month))
axis(1, pos, format(pos, "%Y.%b"), cex.axis = 1.0)
for(i in pos){
lines(rep(i,2),c(-100,1000))
}
}else{
axis(1, table$date, format(table$date, "%b/%d"), cex.axis = 1.0)
}
lines(table$datetime,table$flow,col="blue",lwd=2)
start.date = as.Date("1987-04-01")
end.date = as.Date("1987-05-01")
table = master %>% filter(start.date<=date & date<=end.date)
plot(table$date,table$flow,type="n",xlim=c(start.date,end.date),xaxt="n")
if(as.integer(end.date-start.date)>=365*2){
pos = as.Date(sprintf("%d-01-01",table$year))
axis(1, pos, format(pos, "%Y"), cex.axis = 1.0)
for(i in pos){
lines(rep(i,2),c(-100,1000))
}
}else if(as.integer(end.date-start.date)>=120){
pos = as.Date(sprintf("%d-%d-01",table$year,table$month))
axis(1, pos, format(pos, "%Y.%b"), cex.axis = 1.0)
for(i in pos){
lines(rep(i,2),c(-100,1000))
}
}else{
axis(1, table$date, format(table$date, "%b/%d"), cex.axis = 1.0)
}
lines(table$datetime,table$flow,col="blue",lwd=2)
start.date = as.Date("1987-05-01")
end.date = as.Date("1987-06-01")
table = master %>% filter(start.date<=date & date<=end.date)
plot(table$date,table$flow,type="n",xlim=c(start.date,end.date),xaxt="n")
if(as.integer(end.date-start.date)>=365*2){
pos = as.Date(sprintf("%d-01-01",table$year))
axis(1, pos, format(pos, "%Y"), cex.axis = 1.0)
for(i in pos){
lines(rep(i,2),c(-100,1000))
}
}else if(as.integer(end.date-start.date)>=120){
pos = as.Date(sprintf("%d-%d-01",table$year,table$month))
axis(1, pos, format(pos, "%Y.%b"), cex.axis = 1.0)
for(i in pos){
lines(rep(i,2),c(-100,1000))
}
}else{
axis(1, table$date, format(table$date, "%b/%d"), cex.axis = 1.0)
}
lines(table$datetime,table$flow,col="blue",lwd=2)
plot.level(master,start.date,end.date)
start.date = as.Date("1987-05-01")
end.date = as.Date("1987-06-01")
plot.level(master,start.date,end.date)
start.date = as.Date("1987-05-01")
end.date = as.Date("1987-06-01")
plot.level(master,start.date,end.date)
# plot ---------------------------------------------------------------------
plot.level = function(data, start_date, end_date){
table = data %>% filter(start.date<=date & date<=end.date)
plot(table$date,table$flow,type="n",xlim=c(start.date,end.date),xaxt="n")
if(as.integer(end.date-start.date)>=365*2){
pos = as.Date(sprintf("%d-01-01",table$year))
axis(1, pos, format(pos, "%Y"), cex.axis = 1.0)
for(i in pos){
lines(rep(i,2),c(-100,1000))
}
}else if(as.integer(end.date-start.date)>=120){
pos = as.Date(sprintf("%d-%d-01",table$year,table$month))
axis(1, pos, format(pos, "%Y.%b"), cex.axis = 1.0)
for(i in pos){
lines(rep(i,2),c(-100,1000))
}
}else{
axis(1, table$date, format(table$date, "%b/%d"), cex.axis = 1.0)
}
lines(table$datetime,table$flow,col="blue",lwd=2)
}
start.date = as.Date("1987-05-01")
end.date = as.Date("1987-06-01")
plot.level(master,start.date,end.date)
start.date = as.Date("1987-05-15")
end.date = as.Date("1987-05-20")
plot.level(master,start.date,end.date)
plot.level(master,start.date,end.date)
plot.level(master,start.date,end.date)
#please put the directory path of csv files!
load_butokama_flow=function(path){
numberOfDays <- function(year,month) {
date = as.Date(sprintf("%04d-%02d-01",year,month))
m <- format(date, format="%m")
while (format(date, format="%m") == m) {
date <- date + 1
}
return(as.integer(format(date - 1, format="%d")))
}
table = NULL
files= dir(path)
for(filename in files){
print(sprintf("loading %s...",filename))
if(length(grep("\\d\\d\\d\\dbuto.csv",filename))){
start_year = as.integer(substr(filename,1,4))
start_month = 1
month_num = 12
}else if(length(grep("\\d\\d\\d\\dbuto_\\d.csv",filename))){
start_year = as.integer(substr(filename,1,4))
start_month = 3*as.integer(substr(filename,10,10))-2
month_num = 3
}else if(length(grep("\\d\\d\\d\\dbuto_\\d\\d\\d\\d.csv",filename))){
start_year = as.integer(substr(filename,1,4))
start_month = 4
month_num = 12
}else if(length(grep("\\d\\d\\d\\dbuto_\\d\\d\\d\\dEnd.csv",filename))){
start_year = as.integer(substr(filename,1,4))
start_month = 4
month_num = NA
}else{
print(sprintf("==ERROR==: unknown file name format: %s.",filename))
next
}
dat = read.csv(paste0(path,"/",filename),fileEncoding = "SJIS",header=FALSE)
#remove empty column
while(all(dat[,1]==""| is.na(dat[,1]))){
dat= dat[,-1]
}
head = integer(0)
for(i in 1:nrow(dat)){
if(length(grep("水位",dat[i,]))>27){
head = c(head,i)
}
}
if(is.na(month_num) || length(head)!=month_num){
print(sprintf("==ERROR==: head line num is %d instead of %d in %s.",length(head),month_num,filename))
print(paste0("   head line: ",paste(head,collapse = ", ")))
}
for(month.i in 1:length(head)){
success=TRUE
year = start_year + as.integer((start_month+month.i-2)/12)
month = (start_month+month.i-2)%%12+1
days = 1:numberOfDays(year,month)
#month check
adjust = 0
for(adjust in 0:3){
adjust.ok = TRUE
for(hour in 1:24){
if(length(grep(sprintf("^%d",hour),dat[head[month.i]+hour+adjust,1]))!=1){
adjust.ok = FALSE
break
}
}
if(adjust.ok)break
}
if(!adjust.ok){
print(sprintf("==ERROR==: fail to find correct time column at %d.%d in %s.",year,month,filename))
print(sprintf("   [^%d*]!= [%s]",hour,dat[head[month.i]+hour,1]))
break
}
#data check
field = dat[head[month.i]+1:24+adjust,2:(2*max(days)+1)]
numeric_check = (is.na(apply(field,c(1,2),as.numeric)) & field!="")
if(any(numeric_check)){
print(sprintf("==ERROR==: numeric check find incorrect field at %d.%d in %s.",year,month,filename))
break
}
for(day in days){
jday = as.integer(as.Date(sprintf("%04d-%02d-%02d",year,month,day))-as.Date(sprintf("%04d-01-01",year)))+1
table = rbind(table,data.frame(year=rep(year,24),month=rep(month,24),day=rep(day,24),jday=rep(jday,24),hour=1:24,
level = field[1:24,day*2-1],
flow = field[1:24,day*2]))
}
}
}
write.csv(table,sprintf("%s.csv",path))
}
#data load
table = load_butokama_flow("D:/hmito/Downloads/buto/data")
140*61.4+21*94.2+24*90.6
12748/7*10
12748/7*10/1.15
require("tidyverse")
#関数宣言
# id: http://www1.river.go.jp/ で調べると出てくる水位計測地点の観測所記号
# from_year, from_month　水位を調べる年月
# to_year, to_month　数か月以上の期間を調べる場合は、終了年月
# interval 関数の待ち時間　サーバーの過負荷を避けるために0.2秒程度推奨
download.river_level = function(id,from_year,from_month,to_year=NULL,to_month=NULL,interval=0.2,output=TRUE){
if(is.null(to_year) || is.null(to_month)){
if(!is.null(to_year)){
warning("to_year is ignored because to_month is NULL.")
}
if(!is.null(to_month)){
warning("to_month is ignored because to_year is NULL.")
}
url = sprintf(
"http://www1.river.go.jp/cgi-bin/DspWaterData.exe?KIND=2&ID=%s&BGNDATE=%04d%02d01&ENDDATE=%04d%02d01&KAWABOU=NO",
id,from_year,from_month,from_year+1,from_month
)
if(output)cat(paste0("loading ",from_year,".",from_month,"@",id,"\n"))
Sys.sleep(interval)
html = rvest::read_html(url)
if(str_detect(html%>%rvest::html_text(),"パラメータに誤りがあります")){
stop(paste0("fail to find data with id \"",id,"\""))
}
nodes = html %>% rvest::html_nodes(xpath = "//center/table")
table = nodes[2] %>% rvest::html_table() %>%
.[[1]] %>%
.[-1,]
table[1,1] = "date"
names(table) = as.character(table[1,])
table = table[-1,]
data = table %>%
mutate(date=as.Date(date)) %>%
filter(!is.na(date)) %>%
pivot_longer(names_to = "hour",values_to="level",cols=2:ncol(.)) %>%
mutate(level=as.numeric(level) %>% suppressWarnings()) %>%
mutate(datetime = as_datetime(paste0(strftime(date,"%Y-%m-%d "),sprintf("%s:00:00 JST",str_extract(hour,"[0-9]+")))),.before=date) %>%
select(datetime,level)
}else{
mbegin = from_year*12 + (from_month-1)
mend = to_year*12 + (to_month-1)
if(mbegin>mend){
mtmp = mbegin
mbegin=mend
mend = mtmp
}
data = NULL
for(mno in mbegin:mend){
year = as.integer(mno/12)
month = mno%%12 + 1
data = data %>%
bind_rows(download.river_level(id,year,month,interval=interval))
}
}
return(data)
}
basedata = download.river_level(id,2023,5,2023,6)
require("tidyverse")
#関数宣言
# id: http://www1.river.go.jp/ で調べると出てくる水位計測地点の観測所記号
# from_year, from_month　水位を調べる年月
# to_year, to_month　数か月以上の期間を調べる場合は、終了年月
# interval 関数の待ち時間　サーバーの過負荷を避けるために0.2秒程度推奨
download.river_level = function(id,from_year,from_month,to_year=NULL,to_month=NULL,interval=0.2,output=TRUE){
if(is.null(to_year) || is.null(to_month)){
if(!is.null(to_year)){
warning("to_year is ignored because to_month is NULL.")
}
if(!is.null(to_month)){
warning("to_month is ignored because to_year is NULL.")
}
url = sprintf(
"http://www1.river.go.jp/cgi-bin/DspWaterData.exe?KIND=2&ID=%s&BGNDATE=%04d%02d01&ENDDATE=%04d%02d01&KAWABOU=NO",
id,from_year,from_month,from_year+1,from_month
)
if(output)cat(paste0("loading ",from_year,".",from_month,"@",id,"\n"))
Sys.sleep(interval)
html = rvest::read_html(url)
if(str_detect(html%>%rvest::html_text(),"パラメータに誤りがあります")){
stop(paste0("fail to find data with id \"",id,"\""))
}
nodes = html %>% rvest::html_nodes(xpath = "//center/table")
table = nodes[2] %>% rvest::html_table() %>%
.[[1]] %>%
.[-1,]
table[1,1] = "date"
names(table) = as.character(table[1,])
table = table[-1,]
data = table %>%
mutate(date=as.Date(date)) %>%
filter(!is.na(date)) %>%
pivot_longer(names_to = "hour",values_to="level",cols=2:ncol(.)) %>%
mutate(level=as.numeric(level) %>% suppressWarnings()) %>%
mutate(datetime = as_datetime(paste0(strftime(date,"%Y-%m-%d "),sprintf("%s:00:00 JST",str_extract(hour,"[0-9]+")))),.before=date) %>%
select(datetime,level)
}else{
mbegin = from_year*12 + (from_month-1)
mend = to_year*12 + (to_month-1)
if(mbegin>mend){
mtmp = mbegin
mbegin=mend
mend = mtmp
}
data = NULL
for(mno in mbegin:mend){
year = as.integer(mno/12)
month = mno%%12 + 1
data = data %>%
bind_rows(download.river_level(id,year,month,interval=interval))
}
}
return(data)
}
id = "306041286606040" #向島
basedata = download.river_level(id,2023,5,2023,6)
basedata
plot(basedata$datetime,basedata$level)
plot(basedata$datetime,basedata$level,type="l")
id = "306041286606040" #向島
basedata = download.river_level(id,2023,5,2023,6)
#水位を表示
ggplot() +
geom_line(data=basedata,aes(x=datetime,y=level),color="red")+
xlim(as_datetime("2023-05-21 00:00:00"), as_datetime("2023-06-03 00:00:00")) +
NULL
basedata = download.river_level(id,2023,5,2023,6)
data = NULL
for(id in ids){
basedata = download.river_level(id,2023,5,2023,6)
data = bind_cols(data,basedata)
}
ids = c("306041286606040","306041286618010") #向島, 天ケ瀬
data = NULL
for(id in ids){
basedata = download.river_level(id,2023,5,2023,6)
data = bind_cols(data,basedata)
}
data
basedata = download.river_level(id,2023,5,2023,6)
?bind_cols
ids = c("306041286606040","306041286606010") #向島, 宇治
data = NULL
ids
data_list = c(data_list,list(id))
ids = c("306041286606040","306041286606010") #向島, 宇治
data_list = NULL
for(id in ids){
basedata = download.river_level(id,2023,5,2023,6)
data_list = c(data_list,list(id=basedata))
}
data_list
#水位を表示
ggplot() +
geom_line(data=data_list[[1]],aes(x=datetime,y=level),color="red")+
geom_line(data=data_list[[2]],aes(x=datetime,y=level),color="blue")+
xlim(as_datetime("2023-05-21 00:00:00"), as_datetime("2023-06-03 00:00:00")) +
NULL
#水位を表示
ggplot() +
geom_line(data=data_list[[1]],aes(x=datetime,y=level-min(level)),color="red")+
geom_line(data=data_list[[2]],aes(x=datetime,y=level-min(level)),color="blue")+
xlim(as_datetime("2023-05-21 00:00:00"), as_datetime("2023-06-03 00:00:00")) +
NULL
level-min(level)
#水位を表示
ggplot() +
geom_line(data=data_list[[1]],aes(x=datetime,y=level-min(level)),color="red")+
geom_line(data=data_list[[2]],aes(x=datetime,y=level-min(level)),color="blue")+
xlim(as_datetime("2023-05-21 00:00:00"), as_datetime("2023-06-03 00:00:00")) +
NULL
#水位を表示
ggplot() +
geom_line(data=data_list[[1]],aes(x=datetime,y=level-min(level,na.rm = TRUE)),color="red")+
geom_line(data=data_list[[2]],aes(x=datetime,y=level-min(level,na.rm = TRUE)),color="blue")+
xlim(as_datetime("2023-05-21 00:00:00"), as_datetime("2023-06-03 00:00:00")) +
NULL
basedata
ids = c("306041286606040","306041286606010") #向島, 宇治
data_list = NULL
for(id in ids){
basedata = download.river_level(id,2023,6)
data_list = c(data_list,list(id=basedata))
}
#水位を表示
ggplot() +
geom_line(data=data_list[[1]],aes(x=datetime,y=level-min(level,na.rm = TRUE)),color="red")+
geom_line(data=data_list[[2]],aes(x=datetime,y=level-min(level,na.rm = TRUE)),color="blue")+
xlim(as_datetime("2023-05-21 00:00:00"), as_datetime("2023-06-03 00:00:00")) +
NULL
#水位を表示
ggplot() +
geom_line(data=data_list[[1]],aes(x=datetime,y=level-min(level,na.rm = TRUE)),color="red")+
geom_line(data=data_list[[2]],aes(x=datetime,y=level-min(level,na.rm = TRUE)),color="blue")+
xlim(as_datetime("2023-06-01 00:00:00"), as_datetime("2023-06-03 00:00:00")) +
NULL
ids = c("306041286606060","306041286606040","306041286606010") #淀、向島, 宇治
data_list = NULL
for(id in ids){
basedata = download.river_level(id,2023,6)
data_list = c(data_list,list(basedata))
}
#水位を表示
ggplot() +
geom_line(data=data_list[[1]],aes(x=datetime,y=level-min(level,na.rm = TRUE)),color="red")+
geom_line(data=data_list[[2]],aes(x=datetime,y=level-min(level,na.rm = TRUE)),color="green")+
geom_line(data=data_list[[4]],aes(x=datetime,y=level-min(level,na.rm = TRUE)),color="blue")+
xlim(as_datetime("2023-06-01 00:00:00"), as_datetime("2023-06-03 00:00:00")) +
NULL
ids = c("306041286606060","306041286606040","306041286606010") #淀、向島, 宇治
data_list = NULL
for(id in ids){
basedata = download.river_level(id,2023,6)
data_list = c(data_list,list(basedata))
}
#水位を表示
ggplot() +
geom_line(data=data_list[[1]],aes(x=datetime,y=level-min(level,na.rm = TRUE)),color="red")+
geom_line(data=data_list[[2]],aes(x=datetime,y=level-min(level,na.rm = TRUE)),color="green")+
geom_line(data=data_list[[3]],aes(x=datetime,y=level-min(level,na.rm = TRUE)),color="blue")+
xlim(as_datetime("2023-06-01 00:00:00"), as_datetime("2023-06-03 00:00:00")) +
NULL
ids = c("306041286606060","306041286606040","306041286606010","306041286606160") #淀、向島, 宇治, 勸修寺
data_list = NULL
for(id in ids){
basedata = download.river_level(id,2023,6)
data_list = c(data_list,list(basedata))
}
#水位を表示
ggplot() +
geom_line(data=data_list[[1]],aes(x=datetime,y=level-min(level,na.rm = TRUE)),color="red")+
geom_line(data=data_list[[2]],aes(x=datetime,y=level-min(level,na.rm = TRUE)),color="green")+
geom_line(data=data_list[[3]],aes(x=datetime,y=level-min(level,na.rm = TRUE)),color="blue")+
geom_line(data=data_list[[4]],aes(x=datetime,y=level-min(level,na.rm = TRUE)),color="gold")+
xlim(as_datetime("2023-06-01 00:00:00"), as_datetime("2023-06-03 00:00:00")) +
NULL
ids
data_list
ids = c("306041286606060","306041286606040","306041286606010","306041286606160") #淀、向島, 宇治, 勸修寺
data_list = NULL
for(id in ids){
basedata = download.river_level(id,2023,6)
data_list = c(data_list,list(basedata))
}
require("tidyverse")
#関数宣言
# id: http://www1.river.go.jp/ で調べると出てくる水位計測地点の観測所記号
# from_year, from_month　水位を調べる年月
# to_year, to_month　数か月以上の期間を調べる場合は、終了年月
# interval 関数の待ち時間　サーバーの過負荷を避けるために0.2秒程度推奨
download.river_level = function(id,from_year,from_month,to_year=NULL,to_month=NULL,interval=0.2,output=TRUE){
if(is.null(to_year) || is.null(to_month)){
if(!is.null(to_year)){
warning("to_year is ignored because to_month is NULL.")
}
if(!is.null(to_month)){
warning("to_month is ignored because to_year is NULL.")
}
url = sprintf(
"http://www1.river.go.jp/cgi-bin/DspWaterData.exe?KIND=2&ID=%s&BGNDATE=%04d%02d01&ENDDATE=%04d%02d01&KAWABOU=NO",
id,from_year,from_month,from_year+1,from_month
)
if(output)cat(paste0("loading ",from_year,".",from_month,"@",id,"\n"))
Sys.sleep(interval)
html = rvest::read_html(url)
if(str_detect(html%>%rvest::html_text(),"パラメータに誤りがあります")){
stop(paste0("fail to find data with id \"",id,"\""))
}
nodes = html %>% rvest::html_nodes(xpath = "//center/table")
table = nodes[2] %>% rvest::html_table() %>%
.[[1]] %>%
.[-1,]
table[1,1] = "date"
names(table) = as.character(table[1,])
table = table[-1,]
data = table %>%
mutate(date=as.Date(date)) %>%
filter(!is.na(date)) %>%
pivot_longer(names_to = "hour",values_to="level",cols=2:ncol(.)) %>%
mutate(level=as.numeric(level) %>% suppressWarnings()) %>%
mutate(datetime = as_datetime(paste0(strftime(date,"%Y-%m-%d "),sprintf("%s:00:00 JST",str_extract(hour,"[0-9]+")))),.before=date) %>%
select(datetime,level)
}else{
mbegin = from_year*12 + (from_month-1)
mend = to_year*12 + (to_month-1)
if(mbegin>mend){
mtmp = mbegin
mbegin=mend
mend = mtmp
}
data = NULL
for(mno in mbegin:mend){
year = as.integer(mno/12)
month = mno%%12 + 1
data = data %>%
bind_rows(download.river_level(id,year,month,interval=interval))
}
}
return(data)
}
ids = c("306041286606060","306041286606040","306041286606010","306041286606160") #淀、向島, 宇治, 勸修寺
data_list = NULL
for(id in ids){
basedata = download.river_level(id,2023,6)
data_list = c(data_list,list(basedata))
}
#水位を表示
ggplot() +
geom_line(data=data_list[[1]],aes(x=datetime,y=level-min(level,na.rm = TRUE)),color="red")+
geom_line(data=data_list[[2]],aes(x=datetime,y=level-min(level,na.rm = TRUE)),color="green")+
geom_line(data=data_list[[3]],aes(x=datetime,y=level-min(level,na.rm = TRUE)),color="blue")+
geom_line(data=data_list[[4]],aes(x=datetime,y=level-min(level,na.rm = TRUE)),color="gold")+
xlim(as_datetime("2023-06-01 00:00:00"), as_datetime("2023-06-03 00:00:00")) +
NULL
